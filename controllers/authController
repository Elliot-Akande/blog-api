const Author = require("../models/author");
const bcrypt = require("bcryptjs");
const asyncHandler = require("express-async-handler");
const { body, validationResult } = require("express-validator");

// Handle Author authentication on POST.
exports.login = asyncHandler(async (req, res, next) => {
  res.send("Not implemented");
});

// Handle Author creation on POST.
exports.signup = [
  body("username", "Username must be present")
    .trim()
    .isLength({ min: 1 })
    .escape(),
  body("password", "Password must be at least 8 characters in length")
    .trim()
    .isLength({ min: 8 })
    .escape(),

  asyncHandler(async (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      res.status(400).send(errors.array());
      return;
    }

    bcrypt.hash(req.body.password, 10, async (err, hashedPassword) => {
      if (err) return next(err);
      Author.create({
        username: req.body.username,
        password: hashedPassword,
      });
    });

    res.status(201).send();
  }),
];
